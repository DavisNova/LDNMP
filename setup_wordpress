#!/bin/bash

# 更新系统
apt update -y && apt upgrade -y && apt install -y curl wget sudo socat nano openssl

# 安装 Docker
curl -fsSL https://get.docker.com | sh
curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

# 安装 acme.sh（避免找不到 .acme.sh 目录的错误）
curl https://get.acme.sh | sh

# 获取用户输入
echo "请输入您要申请SSL证书的域名 (例如：example.com):"
read DOMAIN

# 获取用户邮箱输入
echo "请输入用于注册 ZeroSSL 的邮箱地址:"
read EMAIL

# 检查域名解析是否正常
if ping -c 1 $DOMAIN &> /dev/null
then
  echo "域名解析正常，继续进行..."
else
  echo "域名解析失败，请检查您的域名设置！"
  exit 1
fi

# 确保 /home/web 目录存在
mkdir -p /home/web

# 创建目录结构
mkdir -p /home/web/html /home/web/mysql /home/web/certs /home/web/logs/nginx /home/web/logs/php /home/web/logs/wp /home/web/php-fpm

# 获取数据库相关配置
echo "请输入数据库主机地址 (默认: mysql):"
read -p "WORDPRESS_DB_HOST (默认: mysql): " DB_HOST
DB_HOST=${DB_HOST:-mysql}

echo "请输入数据库名称 (默认: web):"
read -p "WORDPRESS_DB_NAME (默认: web): " DB_NAME
DB_NAME=${DB_NAME:-web}

echo "请输入数据库用户名 (默认: 随机生成):"
read -p "WORDPRESS_DB_USER (默认: 随机生成): " DB_USER
DB_USER=${DB_USER:-$(openssl rand -hex 12)}

echo "请输入数据库密码 (默认: 随机生成):"
read -p "WORDPRESS_DB_PASSWORD (默认: 随机生成): " DB_PASSWORD
DB_PASSWORD=${DB_PASSWORD:-$(openssl rand -hex 16)}

# 将配置信息写入 .env 文件
cat > /home/web/.env <<EOL
WORDPRESS_DB_HOST=$DB_HOST
WORDPRESS_DB_NAME=$DB_NAME
WORDPRESS_DB_USER=$DB_USER
WORDPRESS_DB_PASSWORD=$DB_PASSWORD
DOMAIN=$DOMAIN
EOL

# 打印确认信息
echo "---------------------"
echo "数据库配置信息如下："
echo "数据库主机: $DB_HOST"
echo "数据库名称: $DB_NAME"
echo "数据库用户: $DB_USER"
echo "数据库密码: $DB_PASSWORD"
echo "---------------------"
read -p "确认这些设置？(y/n): " CONFIRM
if [[ $CONFIRM != "y" ]]; then
    echo "操作取消。"
    exit 1
fi

# 生成 PHP-FPM 配置文件
cat > /home/web/php-fpm/Dockerfile <<EOL
FROM php:7.4-fpm
RUN docker-php-ext-install mysqli
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
COPY ./composer.json /var/www/html/
WORKDIR /var/www/html
RUN composer install
EOL

# 创建 composer.json 文件
cat > /home/web/php-fpm/composer.json <<EOL
{
    "require": {
        "vlucas/phpdotenv": "^5.5"
    }
}
EOL

# 生成 PHP-FPM 默认池配置文件
cat > /home/web/php-fpm/www.conf <<EOL
[www]
user = www-data
group = www-data
listen = 9000
listen.owner = www-data
listen.group = www-data
pm = dynamic
pm.max_children = 5
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 3
EOL

# 生成 Nginx 配置文件
cat > /home/web/nginx.conf <<EOL
events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    client_max_body_size 10G;

    server {
        listen 80;
        server_name $DOMAIN;

        return 301 https://\$host\$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name $DOMAIN;

        ssl_certificate /etc/nginx/certs/cert.pem;
        ssl_certificate_key /etc/nginx/certs/key.pem;

        root /var/www/html;
        index index.php;

        location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2)$ {
            expires max;
            log_not_found off;
        }

        try_files \$uri \$uri/ /index.php?\$args;

        error_log /var/log/nginx/error.log warn;

        location ~ \.php$ {
            fastcgi_pass php:9000;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            include fastcgi_params;
            fastcgi_read_timeout 300;
        }

        location ~ /\.ht {
            deny all;
        }
    }
}
EOL

# 创建 docker-compose.yml 文件
cat > /home/web/docker-compose.yml <<EOL
version: '3.8'

services:
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./certs:/etc/nginx/certs
      - ./html:/var/www/html
      - /home/web/logs/nginx:/var/log/nginx
    depends_on:
      - php
    networks:
      - webnet

  php:
    build: ./php-fpm
    container_name: php
    restart: always
    volumes:
      - ./php/php.ini:/usr/local/etc/php/php.ini
      - ./html:/var/www/html
      - /home/web/logs/php:/var/log/php
    networks:
      - webnet
    depends_on:
      - mysql
    healthcheck:
      test: ["CMD", "php-fpm", "-t"]
      interval: 1m30s
      timeout: 10s
      retries: 3

  mysql:
    image: mysql:latest
    container_name: mysql
    restart: always
    volumes:
      - ./mysql:/var/lib/mysql
      - /home/web/logs/mysql:/var/log/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    networks:
      - webnet
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost"]
      interval: 30s
      timeout: 10s
      retries: 5

  wordpress:
    image: wordpress:latest
    container_name: wordpress
    restart: always
    environment:
      WORDPRESS_DB_HOST: ${DB_HOST}
      WORDPRESS_DB_USER: ${DB_USER}
      WORDPRESS_DB_PASSWORD: ${DB_PASSWORD}
      WORDPRESS_DB_NAME: ${DB_NAME}
    volumes:
      - ./html:/var/www/html
      - /home/web/logs/wp:/var/log/wp
    depends_on:
      - mysql
    networks:
      - webnet

networks:
  webnet:
    driver: bridge
EOL

# 启动 Docker 容器
cd /home/web
docker-compose up -d

# 停止 Nginx，释放 80 端口
docker-compose stop nginx

# 注册邮箱并生成 SSL 证书
/root/.acme.sh/acme.sh --register-account -m $EMAIL
/root/.acme.sh/acme.sh --issue -d $DOMAIN --standalone

# 如果成功，安装 SSL 证书
if [ $? -eq 0 ]; then
    /root/.acme.sh/acme.sh --installcert -d $DOMAIN --key-file /home/web/certs/key.pem --fullchain-file /home/web/certs/cert.pem
else
    echo "SSL 证书生成失败，继续以 HTTP 模式运行 Nginx。"
    docker-compose start nginx
    exit 1
fi

# 重启 Nginx 容器
docker-compose start nginx

# 修改 wp-config.php，确保加载 .env 文件并启用调试模式
if [ -f /home/web/html/wp-config.php ]; then
    sed -i "/<?php/a if (file_exists(__DIR__ . '/.env')) { require_once __DIR__ . '/vendor/autoload.php'; Dotenv\\Dotenv::createImmutable(__DIR__)->load(); }" /home/web/html/wp-config.php
    sed -i "/\/\*\* That's all, stop editing! Happy publishing. \*\//i define( 'WP_DEBUG', true ); define( 'WP_DEBUG_LOG', true ); define( 'WP_DEBUG_DISPLAY', false );" /home/web/html/wp-config.php

    # 更新数据库设置以使用环境变量
    sed -i "s/define('DB_NAME'.*/define('DB_NAME', getenv('WORDPRESS_DB_NAME') ?: 'database_name_here');/" /home/web/html/wp-config.php
    sed -i "s/define('DB_USER'.*/define('DB_USER', getenv('WORDPRESS_DB_USER') ?: 'username_here');/" /home/web/html/wp-config.php
    sed -i "s/define('DB_PASSWORD'.*/define('DB_PASSWORD', getenv('WORDPRESS_DB_PASSWORD') ?: 'password_here');/" /home/web/html/wp-config.php
    sed -i "s/define('DB_HOST'.*/define('DB_HOST', getenv('WORDPRESS_DB_HOST') ?: 'localhost');/" /home/web/html/wp-config.php
fi

# 确保 wp-content 目录有写入权限
if [ -d /home/web/html/wp-content ]; then
    sudo chmod -R 755 /home/web/html/wp-content
    sudo chown -R www-data:www-data /home/web/html/wp-content
fi

# 重启所有服务
docker-compose restart

echo "安装完成"
