#!/bin/bash

# 更新系统
apt update -y && apt upgrade -y && apt install -y curl wget sudo socat

# 安装 Docker
curl -fsSL https://get.docker.com | sh
curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

# 获取用户输入
echo "请输入您要申请SSL证书的域名 (例如：example.com):"
read DOMAIN

# 输入邮箱用于ZeroSSL注册
echo "请输入用于注册ZeroSSL的邮箱 (例如：my@example.com):"
read EMAIL

# 检查域名解析是否正常
if ping -c 1 $DOMAIN &> /dev/null
then
  echo "域名解析正常，继续进行..."
else
  echo "域名解析失败，请检查您的域名设置！"
  exit 1
fi

# 提示输入数据库相关数据
echo "请输入数据库主机地址 (默认: mysql):"
read -p "WORDPRESS_DB_HOST (默认: mysql): " DB_HOST
DB_HOST=${DB_HOST:-mysql}

echo "请输入数据库名称 (默认: web):"
read -p "WORDPRESS_DB_NAME (默认: web): " DB_NAME
DB_NAME=${DB_NAME:-web}

echo "请输入数据库用户名 (默认: 随机生成):"
read -p "WORDPRESS_DB_USER (默认: 随机生成): " DB_USER
DB_USER=${DB_USER:-$(openssl rand -hex 12)}

echo "请输入数据库密码 (默认: 随机生成):"
read -p "WORDPRESS_DB_PASSWORD (默认: 随机生成): " DB_PASSWORD
DB_PASSWORD=${DB_PASSWORD:-$(openssl rand -hex 16)}

# 打印确认信息
echo "---------------------"
echo "数据库配置信息如下："
echo "数据库主机: $DB_HOST"
echo "数据库名称: $DB_NAME"
echo "数据库用户: $DB_USER"
echo "数据库密码: $DB_PASSWORD"
echo "---------------------"
read -p "确认这些设置？(y/n): " CONFIRM
if [[ $CONFIRM != "y" ]]; then
    echo "操作取消。"
    exit 1
fi

# 获取当前主机名并替换 sudo 解析问题
CURRENT_HOSTNAME=$(hostname)
echo "正在修改主机名解析..."
sudo sed -i "/127.0.1.1/s/.*/127.0.1.1 $CURRENT_HOSTNAME/" /etc/hosts

# 创建目录结构
mkdir -p /home/web/html /home/web/mysql /home/web/certs /home/web/logs/nginx /home/web/logs/php /home/web/php-fpm

# 创建 Docker Compose 配置文件
cat > /home/web/docker-compose.yml <<EOL
services:
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./certs:/etc/nginx/certs
      - ./html:/var/www/html
      - /home/web/logs/nginx:/var/log/nginx
    depends_on:
      - php
    networks:
      - webnet

  php:
    build: ./php-fpm
    container_name: php
    restart: always
    volumes:
      - ./php/php.ini:/usr/local/etc/php/php.ini
      - ./html:/var/www/html
      - /home/web/logs/php:/var/log/php
    networks:
      - webnet
    depends_on:
      - mysql

  mysql:
    image: mysql:latest
    container_name: mysql
    restart: always
    volumes:
      - ./mysql:/var/lib/mysql
      - /home/web/logs/mysql:/var/log/mysql
    environment:
      MYSQL_ROOT_PASSWORD: webroot
      MYSQL_DATABASE: $DB_NAME
      MYSQL_USER: $DB_USER
      MYSQL_PASSWORD: $DB_PASSWORD
    networks:
      - webnet

  wordpress:
    image: wordpress:latest
    container_name: wordpress
    restart: always
    environment:
      WORDPRESS_DB_HOST: $DB_HOST
      WORDPRESS_DB_USER: $DB_USER
      WORDPRESS_DB_PASSWORD: $DB_PASSWORD
      WORDPRESS_DB_NAME: $DB_NAME
    volumes:
      - ./html:/var/www/html
      - /home/web/logs/wp:/var/log/wp
    depends_on:
      - mysql
    networks:
      - webnet

networks:
  webnet:
    driver: bridge
EOL

# 创建 PHP-FPM 的 Dockerfile
cat > /home/web/php-fpm/Dockerfile <<EOL
FROM php:7.4-fpm
RUN apt-get update && apt-get install -y libpng-dev libjpeg-dev libfreetype6-dev && docker-php-ext-install gd mysqli pdo pdo_mysql
RUN docker-php-ext-enable mysqli
EOL

# 创建 PHP 配置文件
mkdir -p /home/web/php
cat > /home/web/php/php.ini <<EOL
upload_max_filesize = 10000M
post_max_size = 10000M
max_execution_time = 600
max_input_time = 600
memory_limit = 512M
date.timezone = Asia/Shanghai
log_errors = On
error_log = /var/log/php/php_errors.log
display_errors = Off
file_uploads = On
max_file_uploads = 50
EOL

# 创建 Nginx 配置文件
cat > /home/web/nginx.conf <<EOL
events {
    worker_connections 1024;
}
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    client_max_body_size 10G;
    server {
        listen 80;
        server_name $DOMAIN;
        return 301 https://\$host\$request_uri;
    }
    server {
        listen 443 ssl http2;
        server_name $DOMAIN;
        ssl_certificate /etc/nginx/certs/cert.pem;
        ssl_certificate_key /etc/nginx/certs/key.pem;
        root /var/www/html;
        index index.php;
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2)$ {
            expires max;
            log_not_found off;
        }
        try_files \$uri \$uri/ /index.php?\$args;
        error_log /var/log/nginx/error.log warn;
        location ~ \.php$ {
            fastcgi_pass php:9000;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            include fastcgi_params;
            fastcgi_read_timeout 300;
        }
        location ~ /\.ht {
            deny all;
        }
    }
}
EOL

# 启动 Docker 容器
cd /home/web
docker-compose up -d

# 停止 Nginx 以释放 80 端口
docker-compose stop nginx

# 注册ZeroSSL账号
~/.acme.sh/acme.sh --register-account -m $EMAIL

# 生成 SSL 证书并检查是否成功
if ~/.acme.sh/acme.sh --issue -d $DOMAIN --standalone; then
    ~/.acme.sh/acme.sh --installcert -d $DOMAIN --key-file /home/web/certs/key.pem --fullchain-file /home/web/certs/cert.pem
else
    echo "SSL 证书生成失败，继续以 HTTP 模式运行 Nginx。"
    docker-compose start nginx
    exit 1
fi

# 重启 Nginx 容器
docker-compose start nginx

# 修改 wp-config.php，启用调试模式并记录日志
sed -i "/\/\*\* That's all, stop editing! Happy publishing. \*\//i define( 'WP_DEBUG', true ); define( 'WP_DEBUG_LOG', true ); define( 'WP_DEBUG_DISPLAY', false );" /home/web/html/wp-config.php

# 确保 wp-content 目录有写入权限
sudo chmod -R 755 /home/web/html/wp-content
sudo chown -R www-data:www-data /home/web/html/wp-content

# 重启所有服务
docker-compose restart

echo "安装完成"
